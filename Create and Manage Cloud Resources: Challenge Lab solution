Task 1. Create a project jumphost instance
Requirements:
Name the instance Instance name.
Use an f1-micro machine type.
Use the default image type (Debian Linux).

Solution:
----------
gcloud compute instances create nucleus-jumphost-642 --machine-type=f1-micro



Task 2. Create a Kubernetes service cluster
Note: There is a limit to the resources you are allowed to create in your project. If you don't get the result you expected, delete the cluster before you create another cluster. If you don't, the lab might end and you might be blocked. To get your account unblocked, you will have to reach out to Google Cloud Skills Boost Support.
The team is building an application that will use a service running on Kubernetes. You need to:

Create a zonal cluster using us-central1-b.
Use the Docker container hello-app (gcr.io/google-samples/hello-app:2.0) as a placeholder; the team will replace the container with their own work later.
Expose the app on port 8080.

Solution:
----------
gcloud container clusters create --machine-type=e2-medium --zone=us-central1-b zonal-cluster 

kubectl create deployment docker-container --image=gcr.io/google-samples/hello-app:2.0

kubectl expose deployment docker-container --type=LoadBalancer --port 8080




Task 3. Set up an HTTP load balancer
You will serve the site via nginx web servers, but you want to ensure that the environment is fault-tolerant. Create an HTTP load balancer with a managed instance group of 2 nginx web servers. Use the following code to configure the web servers; the team will replace this with their own configuration later.

Note: There is a limit to the resources you are allowed to create in your project, so do not create more than 2 instances in your managed instance group. If you do, the lab might end and you might be banned.
cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF


Solution:
----------
Create an instance template

gcloud compute instance-templates create nginx-web-server-template \
          --metadata-from-file startup-script=startup.sh
          --machine-type e2-small \
          --region us-central1

gcloud compute instance-groups managed create nginx-web-server-group \
          --base-instance-name web-server \
          --size 2 \
          --template nginx-web-server-template \
          --region us-central1

Create a target pool




gcloud compute instance-groups managed \
          set-named-ports nginx-web-server-group \
          --named-ports http:80 \
          --region us-central11
          
          
          
  gcloud compute backend-services create nginx-web-server-backend \
          --protocol HTTP \
          --http-health-checks http-basic-check \
          --global

gcloud compute backend-services add-backend nginx-web-server-backend \
          --instance-group nginx-web-server-group \
          --instance-group-region us-central1 \
          --global
          
gcloud compute firewall-rules create accept-tcp-rule-415 \
  --network=default \
  --action=allow \
  --direction=ingress \
  --source-ranges=130.211.0.0/22,35.191.0.0/16 \
  --target-tags=allow-health-check \
  --rules=tcp:80
  
  gcloud compute health-checks create http http-basic-check \
  --port 80
  
gcloud compute url-maps create nginx-web-server-map \
          --default-service nginx-web-server-backend

gcloud compute target-http-proxies create http-lb-proxy \
          --url-map nginx-web-server-map

gcloud compute forwarding-rules create http-content-rule \
        --global \
        --target-http-proxy http-lb-proxy \
        --ports 80

gcloud compute forwarding-rules list        
          
  
